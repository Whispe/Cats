package edu.jhu.cs.tyung1.oose;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;

import javax.swing.*;

import edu.jhu.cs.oose.fall2013.brickus.iface.*;

/**
 * This class constructs the user interface for the Brickus board game.
 */
@SuppressWarnings("serial")
public class MyBrickusFrame extends JFrame {

	BrickusModel model;
	MyBrickusBoard board;
	MyBrickusTray tray;
	MyBrickusTracker tracker;
	SinglePiece activepiece;
	Color player1color;
	Color player2color;
	Color player1colorhalf;
	Color player2colorhalf;
	boolean pieceSelected;
	MyMouseListener myListener;
	MyBrickusListener modelListener;
	
	public static void main(String[] args) {

		BrickusModel model = new edu.jhu.cs.oose.fall2013.brickus.model.StandardBrickusModel();
		MyBrickusFrame gui = new MyBrickusFrame(model);
		gui.go();
	}
	
	/**
	 * Creates an instance of the MyBrickusFrame class.
	 * @param model The BrickusModel containing the game logic, memory, and information.
	 */
	public MyBrickusFrame(BrickusModel model) {
		
		this.model = model;
	}
	
	/**
	 * Initializes an interface for the Brickus game.
	 */
	public void go() {
		
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		
		
		player1color = Color.decode("#0000CC");
		player2color = Color.decode("#CC0000");
		player1colorhalf = new Color(0,0,204,120);
		player2colorhalf = new Color(204,0,0,120);
		
		this.setLayout(new GridBagLayout());
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.fill = GridBagConstraints.BOTH;

		myListener = new MyMouseListener();
		
		modelListener = new MyBrickusListener(this);
		model.addBrickusListener(modelListener);
		
		board = new MyBrickusBoard();
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.weightx = 1;
		constraints.weighty = 1;
		this.add(board, constraints);
		
		tray = new MyBrickusTray(); // lower panel of pieces and pass button
		constraints.gridx = 0;
		constraints.gridy = 1;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.weightx = 1;
		constraints.weighty = 0;
		this.add(tray, constraints);
		
		tracker = new MyBrickusTracker(); // error board, score boards
		constraints.gridx = 0;
		constraints.gridy = 2;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.weightx = 1;
		constraints.weighty = 0;
		this.add(tracker, constraints);
		
		this.setSize(670,710);
		this.setLocationRelativeTo(null);
		this.setVisible(true);
	}
	
	/**
	 * Stores the active piece, the piece which the active player clicked on and can now rotate, flip, or place.
	 * @param panel the new, active SinglePiece object.
	 */
	public void pieceClicked(SinglePiece panel) {
		
		if(activepiece != null) {
			activepiece.unselected();
		}
		
		activepiece = panel;
		activepiece.selected();
		board.pieceSelected();
		updateSinglePiece();
	}
	
	/**
	 * Updates the score displays in the MyBrickusTracker.
	 * @param score1 The new score for Player 1.
	 * @param score2 The new score for Player 2.
	 */
	public void updateScores(int score1, int score2) {
		
		tracker.newScores(score1, score2);
	}
	
	/**
	 * Updates a SinglePiece Brickus piece when the model has changed.
	 */
	public void updateSinglePiece() {
		
		tray.updateSinglePiece();
		board.repaint();
		tray.revalidate();
	}
	
	/**
	 * Updates the error message in the illegal move notification bar when an illegal move is made.
	 * @param message The String message explaining the illegal move.
	 */
	public void updateErrorMessage(String message) {
		
		tracker.newErrorMessage(message);
	}
	
	/**
	 * Flips a SinglePiece horizontally and refreshes the interface when a Player right clicks with a piece selected.
	 */
	public void rightClick(){
		
		if(pieceSelected){
			activepiece.piece.flipHorizontally();
			activepiece = new SinglePiece(activepiece.piece, true);
		}
	}

	/**
	 * Flips a SinglePiece vertically and refreshes the interface when a Player presses SHIFT and right clicks with a piece
	 * selected.
	 */
	public void shiftRightClick(){
		
		if(pieceSelected){
			activepiece.piece.flipVertically();
			activepiece = new SinglePiece(activepiece.piece, true);
		}
	}
	
	/**
	 * Rotates a SinglePiece counterclockwise and refreshes the interface when a Player scrolls the mouse wheel upward.
	 */
	public void scrollUpWheel(){
		
		if(pieceSelected){
			activepiece.piece.rotateCounterClockwise();
			activepiece = new SinglePiece(activepiece.piece, true);
		}
	}
	
	/**
	 * Rotates a SinglePiece clockwise and refreshes the interface when a Player scrolls the mouse wheel down.
	 */
	public void scrollDownWheel(){
		
		if(pieceSelected){
			activepiece.piece.rotateClockwise();
			activepiece = new SinglePiece(activepiece.piece, true);
		}
	}
	
	/**
	 * Closes the current, finished game session.
	 */
	public void closeGame() {
		
		this.setVisible(false);
	}
	
	/**
	 * Removes listeners in the interface, so no pieces can be displayed, rotated, flipped, or placed.
	 */
	public void removeAllListeners() {
		
		model.removeBrickusListener(modelListener);
		board.removeMouseMotionListener(board.mouseHandler);
		board.removeMouseListener(board.mouseHandler);
		board.removeMouseListener(myListener);
		board.removeMouseWheelListener(myListener);
	}
	
	/**
	 * This class implements the interface BrickusListener in order to listen for activity in the Brickus game, so that
	 * changes can be made to the interface when new events occur.
	 */
	class MyBrickusListener implements BrickusListener {
		
		MyBrickusFrame bframe;
		
		public MyBrickusListener(MyBrickusFrame bframe) {
			
			this.bframe = bframe;
		}
		
		/**
		 * Updates the game interface when an illegal move is made.
		 * Specifically, an error message explaining the illegal move is displayed in the MyBrickusTracker instance.
		 * @param event the BrickusIllegalMoveEvent instance representing the illegal move made.
		 */
		public void illegalMove(BrickusIllegalMoveEvent event) {
		
			updateErrorMessage(event.getMessage());
		}

		/**
		 * Updates the game interface when the BrickusModel model is changed.
		 * @param event The BrickusEvent instance which changed the model.
		 */
		public void modelChanged(BrickusEvent event) {
			
			if(!event.isGameOver()) {
				
				updateScores(model.calculateScore(Player.PLAYER1), model.calculateScore(Player.PLAYER2));
				updateSinglePiece();
				if(model.getActivePlayer() == Player.PLAYER1) {
					updateErrorMessage("<html><font color = 0000CC>Player 1 </font>" + "<font color = 000000>to move.</font>");
				}
				else {
					updateErrorMessage("<html><font color = CC0000>Player 2 </font>" + "<font color = 000000>to move.</font>");
				}
			}
			else {
				
				removeAllListeners();
				
				if(model.calculateScore(Player.PLAYER1) > model.calculateScore(Player.PLAYER2)) {
					
					updateErrorMessage("<html><font color = 000000>Game over. </font>" + "<font color = 0000CC>Player 1 </font>" + "<font color = 000000>won with </font>" + model.calculateScore(Player.PLAYER1) + "<font color = 000000> points.</font>");
				}
				else if(model.calculateScore(Player.PLAYER1) < model.calculateScore(Player.PLAYER2)) {
					
					updateErrorMessage("<html><font color = 000000>Game over. </font>" + "<font color = CC0000>Player 2 </font>" + "<font color = 000000>won with </font>" + model.calculateScore(Player.PLAYER2) + "<font color = 00000> points.</font>");
				}
				else {
					
					updateErrorMessage("Game over. Players tied.");
				}
				
				tray.passButton.setText("New game");
				tray.passButton.removeActionListener(tray.buttonListener);
				tray.passButton.addActionListener(new MyEndButtonListener(bframe));
			}
		}
	}

	/**
	 * A class which implements the ActionListener interface to listen for when the "New Game" button is clicked and creates a new
	 * game when the event occurs.
	 */
	class MyEndButtonListener implements java.awt.event.ActionListener {
		
		MyBrickusFrame bframe;
		
		/**
		 * Creates an instance of the MyEndButtonListener class.
		 * @param bframe the MyBrickusFrame instance containing the Brickus interface.
		 */
		public MyEndButtonListener(MyBrickusFrame bframe) {
			
			this.bframe = bframe;
		}
		
		/**
		 * Closes the current game session and opens a new game.
		 * @param event the Event when the New Game button is clicked.
		 */
		public void actionPerformed(ActionEvent event) {
		
			bframe.closeGame();
			MyBrickusFrame.main(null);
		}
	}

	/**
	 * A class which implements the ActionListener interface to listen for when the "Pass" button is clicked and changes the
	 * active player when clicked.
	 */
	class MyButtonListener implements java.awt.event.ActionListener {
		
		/**
		 * Switches to the next Player when the current, active Player chooses to pass.
		 */
		public void actionPerformed(ActionEvent event) {
		
			model.pass(model.getActivePlayer());
		}
	}
		
	/**
	 * This class is the topmost GUI component of the Brickus interface and represents the game board where pieces are placed.
	 */
	class MyBrickusBoard extends JComponent {
		
		int numCol;
		int numRow;
		int[][] mygrid;
		int coveredx, coveredy; // the indices of the cell over which the mouse is currently.
		Point coveredCell;
		int cellWidth = 20;
		MouseAdapter mouseHandler;
		
		/**
		 * Constructs an instance of the MyBrickusBoard class.
		 */
		public MyBrickusBoard() {
			
			pieceSelected = false;
			numCol = model.getWidth();
			numRow = model.getHeight();
			mygrid = new int[numRow][numCol];
			for(int y = 0; y < numRow; y++) {
				
				for(int x = 0; x < numCol; x++) {
					mygrid[y][x] = 0;
				}
			}
			
	        MouseAdapter mouseHandler;
	        mouseHandler = new MouseAdapter() {
	        	
	        	/**
	        	 * Places the active Brickus piece on the board when the active Player clicks.
	        	 * @param event the MouseEvent when the mouse is clicked.
	        	 */
	        	public void mouseClicked(MouseEvent event) {
	        		
	        		if(event.getButton() == MouseEvent.BUTTON1) {
		                int width = getWidth();
		                int height = getHeight();
		
		                int cellWidth = width / numCol;
		                int cellHeight = height / numRow;
		
		                coveredx = event.getX() / cellWidth;
		                coveredy = event.getY() / cellHeight;
		                coveredCell = new Point(coveredx, coveredy);
		                placePiece();
	        		}
	        	}
		            
	        	/**
	        	 * Updates the location of the active Brickus piece's shadow on the board when the Player moves the mouse.
	        	 * @param event the MouseEvent when the active Player moves the mouse.
	        	 */
	            public void mouseMoved(MouseEvent event) {
	
	                int width = getWidth();
	                int height = getHeight();
	                int cellWidth = width / numCol;
	                int cellHeight = height / numRow;
	
	                coveredx = event.getX() / cellWidth;
	                coveredy = event.getY() / cellHeight;
	                coveredCell = new Point(coveredx, coveredy);
	
	                repaint();
	
	            }
	        };
	        this.mouseHandler = mouseHandler;
		        
	        this.addMouseMotionListener(mouseHandler);
	        this.addMouseListener(mouseHandler);
	        this.addMouseListener(myListener);
	        this.addMouseWheelListener(myListener);
	        
		}
		
		/**
		 * Sets a boolean variable to indicate that the active Player has selected a SinglePiece object.
		 */
		public void pieceSelected(){
			
			pieceSelected = true;
		}
		
		/**
		 * Places the active SinglePiece on the board.
		 */
		public void placePiece(){
			
			Player placingPlayer = model.getActivePlayer();
			int playerNum = 0;
			
			if(placingPlayer == Player.PLAYER1) {
				playerNum = 1;
			}
			else if(placingPlayer == Player.PLAYER2){
				playerNum = 2;
			}
			
			if(activepiece != null) {
				model.placePiece(placingPlayer, coveredx, coveredy, activepiece.piece);
			}
			
			if(placingPlayer != model.getActivePlayer()) {
				
				for(int row = 0; row < activepiece.piece.getHeight(); row++) {
					
					for(int col = 0; col < activepiece.piece.getWidth(); col++) {
						
						if(activepiece.piece.isOccupied(col, row)) {
							mygrid[coveredy+row][coveredx+col] = playerNum; 		
						}
					}
				}
				
				activepiece.piece = null;
				pieceSelected = false;
			}
		}
			
		/**
		 * Draws the board lines and colors in the squares to depict Player brick locations (blue for Player 1, red for 
		 * Player 2).
		 * @param g the Graphics object representing the Brickus with lines and colors.
		 */
		public void paintComponent(Graphics g) {
			
            super.paintComponent(g);
            
            int width = this.getWidth();
            int height = this.getHeight();
            int cellWidth = (width-numCol) / (numCol);
            int cellHeight = (height -numRow)/ (numRow);
            int xOffset = (width - (numCol * cellWidth)) / 4;
            int yOffset = (height - (numRow * cellHeight)) / 4;
            
            g.setColor(Color.BLACK);
            g.fillRect(0,0,width, height);            

			for (int row = 0; row < numRow; row++) {
					
		         for (int col = 0; col < numCol; col++) {
			        	 
		        	 if(mygrid[row][col] == 0) {
		        		 g.setColor(Color.WHITE);
		        	 }
		        	 else if(mygrid[row][col] == 1) {
		        		 g.setColor(player1color);
		        	 }
		        	 else if(mygrid[row][col] == 2) {
		        		 g.setColor(player2color);
		        	 }
			        	 g.fillRect(col*cellWidth+col+xOffset,row*cellHeight+row+yOffset,cellWidth, cellHeight);
		         }
		    }
			
	        if (coveredCell != null) { //affect the coveredCell
	        	
	        	Color shadow = Color.WHITE;
	        	
				for (int row = 0; row < numRow; row++) {
					
			         for (int col = 0; col < numCol; col++) {
			        	 
			        	 if(row == coveredy && col == coveredx ) {
			        		 
			        		 if(model.getActivePlayer() == Player.PLAYER1){
			        			 shadow = player1colorhalf;
			        		 }
			        		 else if(model.getActivePlayer() == Player.PLAYER2){
			        			 shadow = player2colorhalf;
			        		 }
				        		 if(pieceSelected) {
			        			 for(int y = 0; y < activepiece.piece.getHeight(); y++){
			        				 for(int x = 0; x < activepiece.piece.getWidth(); x++){
			        					 if(activepiece.piece.isOccupied(x, y)) {
			        						 if(col+x < model.getWidth() && row + y < model.getHeight()){
			        							 g.setColor(shadow);
			        							 g.fillRect((col+x)*cellWidth+(col+x)+xOffset,(row+y)*cellHeight+(row+y)+yOffset,cellWidth, cellHeight);
			        						 }
			        					 }
			        				 }
			        			 }
			        		 }
			        	 }
			         }
				}
	        }
		}
	}
		
	/**
	 * This class represents the second GUI component in the Brickus game, which contains the tray of Brickus pieces left
	 * for the active Player, as well as the Pass button.
	 */
	class MyBrickusTray extends JPanel {
		
		JButton passButton;
		MyButtonListener buttonListener;
		PieceTray tray;
			
		/**
		 * Creates an instance of the MyBrickusTray class.
		 */
		public MyBrickusTray() {
			
			this.setLayout(new GridBagLayout());
			this.setBorder(BorderFactory.createLineBorder(Color.black));		
			GridBagConstraints constraints = new GridBagConstraints();
			constraints.fill = GridBagConstraints.BOTH;
			
			PieceTray pieceTray = new PieceTray();
			pieceTray.setBorder(BorderFactory.createLineBorder(Color.black));
			constraints.gridx = 0;
			constraints.gridy = 0;
			constraints.gridwidth = 7;
			constraints.weightx = 1;
			this.add(pieceTray, constraints);
			this.tray = pieceTray;
				
			passButton = new JButton("Pass");
			MyButtonListener buttonListener = new MyButtonListener();
			passButton.addActionListener(buttonListener);
			this.buttonListener = buttonListener;
			constraints.gridx = 7;
			constraints.gridy = 0;
			constraints.gridwidth = 1;
			constraints.weightx = 0;
			this.add(passButton, constraints);
		}
			
		/**
		 * Updates a SinglePiece object when the model changes.
		 */
		public void updateSinglePiece() {
			
			this.tray.updateSinglePiece();
		}
	}
	
	/**
	 * This class represents the tray displaying the Brickus pieces left for the active Player.
	 * This class differs from MyBrickusTray in that the latter also contains the Pass button.
	 */
	class PieceTray extends JPanel {
					
		/**
		 * Creates an instance of the PieceTray class.
		 */
		public PieceTray() {
			
			this.setLayout(new GridLayout(3, 7));
			this.setBorder(BorderFactory.createLineBorder(Color.black));
			
			for(BrickusPiece piece: model.getPieces(model.getActivePlayer())) {
				
				SinglePiece newPiece = new SinglePiece(piece, true);
				this.add(newPiece);
			}
		}
			
		/**
		 * Updates the tray of SinglePiece objects when a model changes.
		 */
		public void updateSinglePiece() {
			
			int count = 0;
			
			this.removeAll();
			this.repaint();
			
			if(model.getActivePlayer() != null) {
				for(BrickusPiece piece: model.getPieces(model.getActivePlayer())) {
				
					SinglePiece newPiece = new SinglePiece(piece, true);
					if(activepiece != null) {
					
						if(activepiece.piece == piece) {
						
							newPiece.selected();
						}
					}
					this.add(newPiece);
					count++;
				}
				
				for(int i=count; i<21; i++) {
					
					SinglePiece newPiece = new SinglePiece(null, false);
					this.add(newPiece);
				}
			}
		}
	}
		
	/**
	 * This class represents a single Brickus piece within the piece tray.
	 */
	class SinglePiece extends JPanel {
		
		BrickusPiece piece;
			
		/**
		 * Creates an instance of the SinglePiece class.
		 * @param piece the BrickusPiece instance used to generate the GUI representation in the interface.
		 * @param hasListener true if the SinglePiece should have a listener, false otherwise (in the case of empty, placeholder pieces
		 * holding the empty slots of used pieces).
		 */
		public SinglePiece(BrickusPiece piece, boolean hasListener) {
				
			this.piece = piece;
			this.setLayout(new GridLayout(5, 5));
			this.setBackground(Color.white);
			
			if(piece == null) {
				return;
			}
			
			if(hasListener) {
				this.addMouseListener(myListener);
				this.addMouseWheelListener(myListener);
			}
			
			int heightBuffer = calculateBuffer(piece.getHeight());
			int widthBuffer = calculateBuffer(piece.getWidth());
			Player activePlayer = model.getActivePlayer();
			Color playerColor;
			
			if(activePlayer == Player.PLAYER1) {
				playerColor = player1color;
			}
			else {
				playerColor = player2color;
			}
			
			for(int h=0; h<5; h++) {
				
				if(h<heightBuffer) {
						
					for(int i=0; i<5; i++) {
							
						JPanel brick = new JPanel();
						brick.setOpaque(false);
						this.add(brick);
					}
				}
				else {
						
					for(int w=0; w<5; w++) {
						
						if(w<widthBuffer) {
							
							JPanel brick = new JPanel();
							brick.setOpaque(false);
							this.add(brick);
						}
						else {
							
							JPanel brick = new JPanel();
							if(piece.isOccupied(w-widthBuffer, h-heightBuffer)) {
								brick.setBackground(playerColor);
								brick.setBorder(BorderFactory.createLineBorder(Color.black));
							}
							else {
								brick.setBackground(Color.white);
								brick.setOpaque(false);
							}
							this.add(brick);
						}
					}
				}
			}
		}
			
		/**
		 * Calculates the number of rows or columns which must be skipped when drawing a SinglePiece centered in a 5x5 grid.
		 * @param pieceDimension the height or width of the Brickus piece being centered in the 5x5 grid.
		 * @return the number of rows (for height) or columns (for width) that must be skipped to center a piece
		 * in a 5x5 grid.
		 */
		public int calculateBuffer(int pieceDimension) {
			
			int buffer = 0;
				
			switch(pieceDimension) {
			case 1:
				buffer = 2;
				break;
			case 2:
				buffer = 1;
				break;
			case 3:
				buffer = 1;
				break;
			case 4:
				buffer = 0;
				break;
			case 5:
				buffer = 0;
				break;
			}
			
			return buffer;
		}
		
		/**
		 * Highlights in yellow the piece in the piece tray that the active player has clicked on.
		 */
		public void selected() {
			
			this.setBackground(Color.yellow);
		}
		
		/**
		 * Removes the yellow highlight for a piece in the tray after the active player has clicked on a different piece.
		 */
		public void unselected() {
			
			this.setBackground(Color.white);
		}
	}
	
	/**
	 * This class represents the bottom GUI component in the Brickus interface, which displays an explanatory message when
	 * a Player attempts to make an illegal move.
	 * The score displays are also changed when the active Player places a piece.
	 */
	class MyBrickusTracker extends JPanel {
		
		JLabel errorText;
		JLabel player1Score;
		JLabel player2Score;
		JLabel player3Score;
		JLabel player4Score;
		
		/**
		 * Creates an instance of the MyBrickusTracker class.
		 */
		public MyBrickusTracker() {
			
			this.setLayout(new GridBagLayout());
			this.setBorder(BorderFactory.createLineBorder(Color.black));
			GridBagConstraints constraints = new GridBagConstraints();
			constraints.fill = GridBagConstraints.HORIZONTAL;
			
			JPanel subpanelLeft = new JPanel(new BorderLayout());
			JPanel subpanelRight = new JPanel(new FlowLayout(FlowLayout.TRAILING));
			
			errorText = new JLabel("<html><font color = 000000>Welcome to Brickus! </font>");
			errorText.setText(errorText.getText() + "<font color=0000CC>Player 1 </font>");
			errorText.setText(errorText.getText() + "<font color = 000000>to move.</font");
			
			player1Score = new JLabel("<html><font color = 0000CC>Score: 0 </font>");
			player2Score = new JLabel("<html><font color = CC0000>Score: 0 </font>");
			
			subpanelLeft.add(errorText);
			subpanelRight.add(player1Score);
			subpanelRight.add(player2Score);
			
			constraints.gridx = 0;
			constraints.gridy = 0;
			constraints.gridwidth = 5;
			constraints.weightx = 1;
			this.add(subpanelLeft, constraints);
			
			constraints.gridx = 5;
			constraints.gridy = 0;
			constraints.gridwidth = 2;
			constraints.weightx = 0;
			this.add(subpanelRight, constraints);
		}
		
		/**
		 * Displays a new error message.
		 * @param message the String message to be displayed.
		 */
		public void newErrorMessage(String message) {
			
			errorText.setText(message);
		}
		
		/**
		 * Displays the updated scores for Player 1 and Player 2.
		 * @param score1 The updated score for Player 1.
		 * @param score2 The updated score for Player 2.
		 */
		public void newScores(int score1, int score2) {
			
			player1Score.setText("<html><font color = 0000CC>Score: " + score1 + "</font>");
			player2Score.setText("<html><font color = CC0000>Score: " + score2 + "</font>");
		}
	}
	
	/**
	 * A class which listens for when a mouse is pressed or a mouse wheel is scrolled and updates the active SinglePiece accordingly.
	 */
	class MyMouseListener extends MouseAdapter implements MouseWheelListener {
		
		/**
		 * Updates the active SinglePiece accordingly when a mouse is pressed.
		 */
		public void mousePressed(MouseEvent e) {
			
			if (e.getButton() == MouseEvent.BUTTON1) {
	    	  
				if(e.getSource() instanceof SinglePiece) {
	    		  
					pieceClicked((SinglePiece)e.getSource());
				}
			} 
			else if (e.isShiftDown() && e.getButton() == MouseEvent.BUTTON3) {
	    	  
				shiftRightClick();
			}
			else if(!e.isShiftDown() && e.getButton() == MouseEvent.BUTTON3) {
	    	  
				rightClick();
			}
		}
		
		/**
		 * Updates the active SinglePiece accordingly when the mouse wheel is scrolled.
		 */
		public void mouseWheelMoved(MouseWheelEvent w) {
		   
			if(w.getWheelRotation() < 0) {
			   
				scrollUpWheel();   
			}
			else {
			   
				scrollDownWheel();
			}
		}
	}
}
